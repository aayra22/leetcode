class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq; // dequeue is needed so that we can access from both ends
        vector<int> ans; 
        // handling first window
        for( int i =0;i<k;i++ ){
            // remove small element
            while(!dq.empty() && nums[i]>= nums[dq.back()]){
                dq.pop_back();
            }
           //  inserting index into queue not value
           dq.push_back(i);

        }
        // store ans for first window 
        ans.push_back(nums[dq.front()]);
         // process remaining windows 
         for(int i=k ;i<nums.size();i++){
            //remove out of window elements
            if(!dq.empty() && i-dq.front()>=k){
                dq.pop_front();
            }
            // again check small element
            while(!dq.empty() && nums[i] >= nums[dq.back()]){
                dq.pop_back();
            }
            // insert index into queue
            dq.push_back(i);
            // store ans of cuu window 
            ans.push_back(nums[dq.front()]);
         }
         
      return ans;
    }
};
